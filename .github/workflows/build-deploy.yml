name: Build & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  build:
    name: Build & Test

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-cache-${{ runner.os }}-${{ env.PYTHON_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Spin up Containers
        run: |
          touch web.env
          docker-compose up -d db

      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip setuptools poetry

      - name: Set poetry version
        run: |
          poetry version $(date +"%Y.%m.%d")

      - name: Install Dependencies
        run: |
          poetry install --sync

      - name: Run Checks
        run: |
          make check
        env:
          DJANGO_ENV: test

      - name: Run Tests
        run: |
          make test
        env:
          DJANGO_ENV: test
          DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/postgres'

      - name: Stop Containers
        run: |
          docker-compose down

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: reports/tests/*.xml

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  docker:
    name: Docker Build & Deploy

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: clarkperkins
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: clarkperkins/saucerbot
          tags: |
            type=ref,event=pr
            type=raw,enable={{is_default_branch}},value=latest
            type=raw,enable={{is_default_branch}},value={{date 'YYYYMMDD-HHmmss'}}-{{sha}}

      - name: Docker Build and Push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=clarkperkins/saucerbot:buildcache
          cache-to: type=registry,ref=clarkperkins/saucerbot:buildcache,mode=max

  helm:
    name: Helm Release

    permissions:
      contents: write

    runs-on: ubuntu-latest

    if: github.ref_name == github.event.repository.default_branch

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.1

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
